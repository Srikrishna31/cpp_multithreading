"""Rules for code formatting with Black (Cross-Platform).

This module provides Bazel rules for formatting and checking Python code
with Black that work on Linux, macOS, and Windows.

Rules:
    - black_format: Format Python files (modifies files in place)
    - black_check: Check Python formatting without modifying (for CI)

Usage:
    load("//:format.bzl", "black_format", "black_check")
    
    black_format(
        name = "format",
        srcs = glob(["*.py"]),
    )
    
    black_check(
        name = "format_check",
        srcs = glob(["*.py"]),
    )
"""

def _black_format_impl(ctx):
    """Implementation function for black_format rule.
    
    Creates an executable that runs Black formatter on all
    specified Python source files. Works on Linux, macOS, and Windows.
    
    Args:
        ctx: Rule context
        
    Returns:
        DefaultInfo provider with executable script and runfiles
    """
    # Use Python script for cross-platform compatibility
    output = ctx.actions.declare_file(ctx.label.name + ".py")
    
    # Get all Python files
    py_files = []
    for src in ctx.files.srcs:
        if src.path.endswith(".py"):
            py_files.append(src.short_path)
    
    # Create Python script that calls Black
    script_content = """#!/usr/bin/env python3
# Auto-generated by format.bzl
import subprocess
import sys

files = {files}

print("üé® Running Black formatter on {{}} Python files...".format(len(files)))

for f in files:
    print("Formatting: {{}}".format(f))

cmd = [sys.executable, "-m", "black"] + files
result = subprocess.run(cmd)

if result.returncode == 0:
    print("‚úÖ Formatting complete!")
else:
    print("‚ùå Formatting failed!")
    
sys.exit(result.returncode)
""".format(files=repr(py_files))
    
    ctx.actions.write(
        output = output,
        content = script_content,
        is_executable = True,
    )
    
    runfiles = ctx.runfiles(
        files = ctx.files.srcs,
    )
    
    return [DefaultInfo(
        executable = output,
        runfiles = runfiles,
    )]

black_format = rule(
    implementation = _black_format_impl,
    attrs = {
        "srcs": attr.label_list(
            allow_files = [".py"],
            doc = "Python source files to format",
        ),
    },
    executable = True,
    doc = """Format Python files with Black (cross-platform).
    
    This rule runs Black formatter on the specified Python files,
    modifying them in place to conform to Black's formatting style.
    Works on Linux, macOS, and Windows.
    
    Example:
        bazel run //:format
    """,
)

def _black_check_impl(ctx):
    """Implementation function for black_check rule.
    
    Creates an executable that checks Python files with Black
    without modifying them. Works on Linux, macOS, and Windows.
    
    Args:
        ctx: Rule context
        
    Returns:
        DefaultInfo provider with executable script and runfiles
    """
    # Use Python script for cross-platform compatibility
    output = ctx.actions.declare_file(ctx.label.name + ".py")
    
    py_files = []
    for src in ctx.files.srcs:
        if src.path.endswith(".py"):
            py_files.append(src.short_path)
    
    # Create Python script that calls Black
    script_content = """#!/usr/bin/env python3
# Auto-generated by format.bzl
import subprocess
import sys

files = {files}

print("üîç Checking Python formatting with Black...")

cmd = [sys.executable, "-m", "black", "--check", "--diff"] + files
result = subprocess.run(cmd)

if result.returncode == 0:
    print("‚úÖ All files are properly formatted!")
else:
    print("‚ùå Some files are not properly formatted!")
    print("")
    print("Run 'bazel run //:format' to fix formatting issues.")
    
sys.exit(result.returncode)
""".format(files=repr(py_files))
    
    ctx.actions.write(
        output = output,
        content = script_content,
        is_executable = True,
    )
    
    runfiles = ctx.runfiles(
        files = ctx.files.srcs,
    )
    
    return [DefaultInfo(
        executable = output,
        runfiles = runfiles,
    )]

black_check = rule(
    implementation = _black_check_impl,
    attrs = {
        "srcs": attr.label_list(
            allow_files = [".py"],
            doc = "Python source files to check",
        ),
    },
    executable = True,
    doc = """Check Python files with Black (CI mode, cross-platform).
    
    This rule checks if Python files conform to Black's formatting
    style without modifying them. Returns non-zero exit code if
    files need formatting. Works on Linux, macOS, and Windows.
    
    Example:
        bazel run //:format_check
    """,
)
